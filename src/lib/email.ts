// Sistema de env√≠o de reportes por email
export interface EmailReport {
  to: string;
  subject: string;
  body: string;
  attachments?: string[];
}

// Generar reporte diario en formato texto
export const generateDailyReport = (data: {
  date: string;
  totalSales: number;
  totalOrders: number;
  cashCRC: number;
  cashUSD: number;
  cardCRC: number;
  cardUSD: number;
}): string => {
  return `
REPORTE DIARIO - RESTAURANTE FISCHER
=====================================
Fecha: ${data.date}

RESUMEN DE VENTAS:
- Total de √ìrdenes: ${data.totalOrders}
- Venta Total: ‚Ç°${data.totalSales.toLocaleString('es-CR')}

M√âTODOS DE PAGO:
- Efectivo CRC: ‚Ç°${data.cashCRC.toLocaleString('es-CR')}
- Efectivo USD: $${data.cashUSD.toFixed(2)}
- Tarjeta CRC: ‚Ç°${data.cardCRC.toLocaleString('es-CR')}
- Tarjeta USD: $${data.cardUSD.toFixed(2)}

PROMEDIO POR ORDEN: ‚Ç°${Math.round(data.totalSales / data.totalOrders).toLocaleString('es-CR')}

=====================================
Generado autom√°ticamente por Sistema POS Fischer
  `;
};

// Simular env√≠o de email (en producci√≥n se conectar√≠a a un servicio real)
export const sendEmailReport = async (report: EmailReport): Promise<boolean> => {
  try {
    // En un entorno real, aqu√≠ se conectar√≠a a un servicio de email
    // como SendGrid, Mailgun, o el servicio SMTP del restaurante
    console.log('üìß Enviando reporte por email...');
    console.log('Para:', report.to);
    console.log('Asunto:', report.subject);
    console.log('Contenido:', report.body);
    
    // Simular delay de env√≠o
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Simular √©xito (en producci√≥n manejar√≠a errores reales)
    return true;
  } catch (error) {
    console.error('Error enviando email:', error);
    return false;
  }
};

// Configuraci√≥n de email por defecto
export const DEFAULT_EMAIL_CONFIG = {
  adminEmail: 'admin@fischer.com',
  reportSubject: 'Reporte Diario - Restaurante Fischer',
  backupEmail: 'backup@fischer.com'
};