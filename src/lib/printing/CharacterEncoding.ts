// lib/printing/CharacterEncoding.ts
/**
 * Sistema de codificaci√≥n de caracteres para impresoras t√©rmicas ESC/POS
 * Soluciona problemas con: √±, √°, √©, √≠, √≥, √∫, ¬¢ y otros caracteres especiales
 * 
 * PROBLEMA: Las impresoras t√©rmicas MPR-300 usan Code Page 437 (CP437) o Latin-1
 * pero JavaScript usa UTF-8, causando caracteres corruptos.
 * 
 * SOLUCI√ìN: Mapear caracteres UTF-8 a sus equivalentes en CP437/Latin-1
 */

// Mapa de caracteres especiales espa√±oles a CP437/Latin-1
const CP437_MAP: Record<string, number> = {
  // Vocales con tilde
  '√°': 0xA0, '√©': 0x82, '√≠': 0xA1, '√≥': 0xA2, '√∫': 0xA3,
  '√Å': 0xB5, '√â': 0x90, '√ç': 0xD6, '√ì': 0xE0, '√ö': 0xE9,
  
  // √ë/√±
  '√±': 0xA4, '√ë': 0xA5,
  
  // S√≠mbolo de col√≥n costarricense (usamos ¬¢ = cent)
  '‚Ç°': 0x9B, // Cent en CP437
  '¬¢': 0x9B,
  ',': 0x2C,
  '.': 0x2E,
  
  // Otros caracteres √∫tiles
  '¬ø': 0xA8, '¬°': 0xAD,
  '√º': 0x81, '√ú': 0x9A,
  
  // S√≠mbolos de moneda
  '$': 0x24, // D√≥lar (ASCII est√°ndar)
};

// Fallback: reemplazos ASCII seguros si no se puede mapear
const ASCII_FALLBACK: Record<string, string> = {
  '√°': 'a', '√©': 'e', '√≠': 'i', '√≥': 'o', '√∫': 'u',
  '√Å': 'A', '√â': 'E', '√ç': 'I', '√ì': 'O', '√ö': 'U',
  '√±': 'n', '√ë': 'N',
  '√º': 'u', '√ú': 'U',
  '‚Ç°': 'C', '¬¢': 'C',
  '¬ø': '?', '¬°': '!',
};

/**
 * Codifica texto UTF-8 a bytes CP437 para impresoras t√©rmicas
 * USO: Antes de enviar texto a la impresora
 */
export function encodeToCP437(text: string): Uint8Array {
  const bytes: number[] = [];
  
  for (let i = 0; i < text.length; i++) {
    const char = text[i];
    const charCode = char.charCodeAt(0);
    
    // ASCII b√°sico (0-127) pasa directo
    if (charCode < 128) {
      bytes.push(charCode);
      continue;
    }
    
    // Caracteres especiales mapeados
    if (CP437_MAP[char] !== undefined) {
      bytes.push(CP437_MAP[char]);
      continue;
    }
    
    // Fallback: reemplazar por ASCII
    const fallback = ASCII_FALLBACK[char];
    if (fallback) {
      for (let j = 0; j < fallback.length; j++) {
        bytes.push(fallback.charCodeAt(j));
      }
      continue;
    }
    
    // √öltimo recurso: ignorar o usar '?'
    bytes.push(0x3F); // '?'
  }
  
  return new Uint8Array(bytes);
}

/**
 * Limpia texto eliminando caracteres no imprimibles
 * USO: Sanitizar texto antes de codificar
 */
export function sanitizeText(text: string): string {
  return text
    .replace(/[\x00-\x08\x0B-\x0C\x0E-\x1F\x7F]/g, '') // Control chars
    .replace(/\s+/g, ' ') // Multiple spaces
    .trim();
}

/**
 * Normaliza moneda para impresi√≥n
 * Convierte ‚Ç° y $ a formato seguro
 */
export function normalizeCurrency(amount: number, currency: 'CRC' | 'USD'): string {
  const symbol = currency === 'USD' ? '$' : '‚Ç°';
  const rounded = Math.round(amount);
  
  // üî• FIX: Formatear sin comas para evitar problemas de encoding
  // En impresoras t√©rmicas es mejor sin separadores
  return `${symbol}${rounded}`;
}

/**
 * Trunca texto a ancho espec√≠fico (en caracteres)
 * USO: Asegurar que l√≠neas no excedan ancho del papel
 */
export function truncateText(text: string, maxWidth: number, ellipsis = '...'): string {
  if (text.length <= maxWidth) return text;
  return text.substring(0, maxWidth - ellipsis.length) + ellipsis;
}

/**
 * Pad texto para alineaci√≥n (izq/der)
 * USO: Crear columnas alineadas en recibos
 */
export function padText(text: string, width: number, align: 'left' | 'right' = 'left'): string {
  if (text.length >= width) return truncateText(text, width);
  
  const padding = ' '.repeat(width - text.length);
  return align === 'left' ? text + padding : padding + text;
}

/**
 * Crea l√≠nea de dos columnas (nombre - precio)
 * USO: Items de recibo con precio alineado a la derecha
 */
export function createTwoColumnLine(left: string, right: string, width: number): string {
  const rightWidth = right.length;
  const leftWidth = width - rightWidth - 1; // -1 para espacio
  
  if (left.length > leftWidth) {
    left = truncateText(left, leftWidth);
  }
  
  return padText(left, leftWidth) + ' ' + right;
}

/**
 * Comando ESC/POS para configurar Code Page
 * Enviar ANTES de cualquier texto con caracteres especiales
 */
export function getCodePageCommand(): Uint8Array {
  // ESC t n - Seleccionar Code Page
  // n = 0: CP437 (USA, Standard Europe)
  // n = 3: PC850 (Multilingual)
  return new Uint8Array([0x1B, 0x74, 0x00]); // CP437
}

/**
 * Test de compatibilidad de caracteres
 * USO: Debug - verificar qu√© caracteres se pueden imprimir
 */
export function getCharacterCompatibilityTest(): string {
  return [
    'TEST DE CARACTERES ESPECIALES',
    '================================',
    'Vocales: √° √© √≠ √≥ √∫',
    'May√∫sculas: √Å √â √ç √ì √ö',
    'E√±e: √± √ë',
    'Colones: ‚Ç°1000 ¬¢500',
    'D√≥lares: $10 $25.50',
    'S√≠mbolos: ¬øHola? ¬°Pura vida!',
    'N√∫meros: 1234567890',
    'Especiales: @ # % & * ( )',
    '================================',
  ].join('\n');
}